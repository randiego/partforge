<script type="text/javascript">
var scrollPosKeyRight = "<?php echo 'itemViewRightPanelPos'.$this->dbtable->itemversion_id;?>";
var scrollPosKeyLeft = "<?php echo 'itemViewLeftPanelPos'.$this->dbtable->itemversion_id;?>";
var pdfViewUrl = "<?php echo $this->navigator->getCurrentViewUrl('itemviewpdf', null, array('itemversion_id' => $this->dbtable->itemversion_id, 'show_form_fields' => '_SHOWFORM_', 'show_text_fields' => '_SHOWTEXT_', 'show_event_stream' => '_SHOWEVENTS_'));?>";
var followUrl = "<?php echo $this->navigator->getCurrentHandlerUrl('btnFollow', null, null, array('itemobject_id' => $this->dbtable->itemobject_id, 'followNotifyTimeHHMM' => '_FOLLOWNOTIFYTIMEHHMM_', 'notify_instantly' => '_NOTIFYINSTANTLY_', 'notify_daily' => '_NOTIFYDAILY_'));?>";
var followInstantly =  "<?php echo $_SESSION['account']->getPreference('followInstantly');?>";
var followDaily =  "<?php echo $_SESSION['account']->getPreference('followDaily');?>";
var followNotifyTimeHHMM =  "<?php echo $_SESSION['account']->getPreference('followNotifyTimeHHMM');?>";
var followNotifyEmailMsg =  "<?php echo implode('  ', $_SESSION['account']->reasonsWhyCantRecieveWatchNotices());?>";
var linkToPageUrl = "<?php echo $this->dbtable->absoluteUrl();?>";
var lookupUrl = '<?php echo $this->navigator->getCurrentViewUrl('jsonsearchloginids', 'user');?>';
var canSendLink = <?php echo in_array($_SESSION['account'] ->getRole(), array('Guest','DataTerminal')) ? 'false' : 'true';?>;
</script>
<?php $baseUrl = Zend_Controller_Front::getInstance()->getRequest()->getBaseUrl();?>
<script language="JavaScript" src="<?php echo $baseUrl;?>/scripts/struct/itemview.js?v=15" type="TEXT/JAVASCRIPT"></script>
<?php

$title = $this->dbtable->getPageTypeTitleHtml().($this->dbtable->item_serial_number ? ' - '.TextToHtml($this->dbtable->item_serial_number) : '');
$title_short = $this->dbtable->getPageTypeTitleHtml(true).($this->dbtable->item_serial_number ? ' - '.TextToHtml($this->dbtable->item_serial_number) : '');

$this->dbtable->setFieldTypeForRecordLocator();

$this->layout()->title = 'Item View: '.$title;
$this->layout()->setLayout('layout');
$this->layout()->scrollhold = true;

$is_current_version = $this->dbtable->io__cached_current_itemversion_id==$this->dbtable->itemversion_id;
$is_a_procedure = DBTableRowTypeVersion::isTypeCategoryAProcedure($this->dbtable->tv__typecategory_id);
$big_page_length = isset($this->queryvars['months']) ? (($this->queryvars['months']==1) ? '1 month' : $this->queryvars['months'].' months') : '';
$not_all_records_showing = EventStream::getNestedEventStreamRecordCount($this->dbtable) != EventStream::getNestedEventStreamRecordCount($this->dbtable, $this->earliest_date);

$html = '';
$html_right = '';
$html_head = '';

$detailslinks = array();
$menulinks = array();

$return_url = $this->navigator->getCurrentViewUrl(null, null, array('itemversion_id' => $this->dbtable->itemversion_id));

// offer to add another item under the right conditions...
if (isset($this->queryvars['offer_more_url'])) {
    $detailslinks[] = linkify($this->queryvars['offer_more_url'], 'Enter Another...', 'Enter Another item like this one.', 'bd-button', '', '', 'AddAnotherID');
}

/*
 * Do we offer the Edit button?
 */
if (Zend_Registry::get('customAcl')->isAllowed($_SESSION['account']->getRole(), 'ui:itemlistview', 'show_addedit_item_button')) {
    $allow_new_version = Zend_Registry::get('customAcl')->isAllowed($_SESSION['account']->getRole(), 'ui:itemedit', $is_a_procedure ? 'new_proc_version' : 'new_part_version');
    $allow_edit_version = Zend_Registry::get('customAcl')->isAllowed($_SESSION['account']->getRole(), 'ui:itemedit', $is_a_procedure ? 'edit_proc_version' : 'edit_part_version');
    $show_new_version_button = $is_current_version && $allow_new_version;

    if ($show_new_version_button) {
        // if this is the only operation we are allowed to do, then use the generic verb 'Edit'
        $return_url_addit = $this->navigator->getCurrentViewUrl(null, null, array('itemobject_id' => $this->dbtable->itemobject_id));
        $initialize = array();
        // we initialize the effective date in the following special circumstances
        $initialize['effective_date'] = ($_SESSION['account']->getRole()=='DataTerminal') || $is_a_procedure ? time_to_mysqldatetime(script_time()) : '';
        $initialize['proxy_user_id'] =  ($_SESSION['account']->getRole()=='DataTerminal') ? $_SESSION['account']->user_id : LOGGED_IN_USER_IS_CREATOR;
        $detailslinks[] = linkify( $this->navigator->getCurrentViewUrl('editview', null, array('table' => 'itemversion','itemversion_id' => $this->dbtable->itemversion_id, 'initialize' => $initialize, 'return_url' => $return_url_addit, 'resetview' => 1)), 'Edit', 'Create New Version', 'bd-button', '', '', 'btn-new-version-id');
    }
}

$BreadCrumbs = new BreadCrumbsManager();
$BreadCrumbs->addCurrentUrl($return_url, $title_short);
$html_head .= $BreadCrumbs->render($return_url, $title_short, 3, 'breadcrumbdiv fixed');

$html_head .= '<div id="itemviewSearchBlock">
					<input name="itemversion_id" TYPE="hidden" VALUE="'.$this->dbtable->itemversion_id.'">
					<input id="search_string" class="inputboxclass" type="text" name="search_string">
					<INPUT class="searchbutton" TYPE="submit" VALUE="Search" NAME="btnSearch">
				</div>';

if (Zend_Registry::get('customAcl')->isAllowed($_SESSION['account']->getRole(), 'ui:nonterminalbling')) {
    // let user copy a link to this page
    $detailslinks[] = linkify('#', 'Link to Page', 'Copy or Send link to this page', 'bd-button', "", '', 'linkToPageButton');
    // this is sneaky, but this link will actually work if the JS is not executed, but is normally overridden by the JS.
    $pdf_url = $this->navigator->getCurrentViewUrl('itemviewpdf', null, array('itemversion_id' => $this->dbtable->itemversion_id));
    $detailslinks[] = linkify($pdf_url, 'PDF', 'Open a printable PDF view of this page', 'bd-button', '', '', 'pdfButton');

    if (Zend_Registry::get('customAcl')->isAllowed($_SESSION['account']->getRole(), 'user', 'managemylists')) {
        $Subscription = new DBTableRowChangeSubscription();
        $is_following = $Subscription->getRecordByIds($_SESSION['account']->user_id, $this->dbtable->itemobject_id, null);
        $cat_name = $is_a_procedure ? 'Procedure' : 'Part';
        if ($is_following) {
            $usfollow_url = $this->navigator->getCurrentHandlerUrl('btnUnFollow', null, null, array('itemobject_id' => $this->dbtable->itemobject_id));
            $detailslinks[] = linkify($usfollow_url, 'Stop Watching', $Subscription->getDescription()."  Click here to remove this item from your Watchlist.", 'bd-button');
        } else {
            $follow_url = $this->navigator->getCurrentHandlerUrl('btnFollow', null, null, array('itemobject_id' => $this->dbtable->itemobject_id));
            $detailslinks[] = linkify($follow_url, 'Watch', "Add to your Watchlist to follow any changes that occur to this {$cat_name}", 'bd-button', '', '', 'followButton');
        }
    }
}

/*
 * Get list of procedures that we are allowed to create from here and generate their Add Urls
 */
$procedure_records = getTypesThatReferenceThisType($this->dbtable->typeversion_id);
// remove any obsolete ones
foreach ($procedure_records as $key => $record) {
    if ($record['typedisposition']=='B') {
        unset($procedure_records[$key]);
    }
}
$current_ver_return_url = $this->navigator->getCurrentViewUrl(null, null, array('itemobject_id' => $this->dbtable->itemobject_id));
foreach ($procedure_records as $key => $record) {
    $initialize = array($record['component_name'] => $this->dbtable->itemobject_id,'typeversion_id' => $record['typeversion_id']);
    $procedure_records[$key]['add_url'] = $this->navigator->getCurrentViewUrl('editview', 'struct', array('table' => 'itemversion', 'itemversion_id' => 'new', 'return_url' => $current_ver_return_url, 'initialize' => $initialize, 'resetview' => 1));
}


if (Zend_Registry::get('customAcl')->isAllowed($_SESSION['account']->getRole(), 'table:itemversion', 'add') and (count($procedure_records)>0)) {
    // make sure we have only 1 add button per type
    $out = array();
    foreach ($procedure_records as $record) {
        $out[$record['add_url']] = array('Add '.$record['type_description'], $record['section_break']) ;
    }
    foreach ($out as $url => list($link_caption, $section_break)) {
        if ($section_break) {
            $menulinks[] = '<hr>';
        }
        $menulinks[] = linkify($url, $link_caption, $link_caption);
    }
}

/*
 * Build list of EventStream items
*/

$records = $this->streamrecords;
list($lines,$references_by_typeobject_id) = EventStream::eventStreamRecordsToLines($records, $this->dbtable, $this->navigator);
$layout_rows = EventStream::eventStreamLinesToHtml($this->dbtable, $lines, $this->navigator);

/*
 * Create the Used On links if we are a part
*/
if (!$is_a_procedure) {
    $usedon = EventStream::getUsedOnEntries($this->dbtable->itemobject_id, $this->navigator);
    if (count($usedon)==1) {
        $linkfields = reset($usedon);
        $detailslinks[] = linkify($linkfields['url'], $linkfields['name'], $linkfields['title'], 'used-on-button');
    } else if (count($usedon)>1) {
        $used_on_links = array();
        foreach ($usedon as $itemobject_id => $linkfields) {
            $used_on_links[] = linkify($linkfields['url'], $linkfields['name'], $linkfields['title'], '');
        }
        $detailslinks[] = '<button class="used-on-button jumpmenu">Used On...</button><ul><li>'.implode('</li><li>', $used_on_links).'</li></ul>';
    }
}

if ($this->show_big_page_controls) {
    $all_button = $this->queryvars['months']!='ALL' ? '<button class="showAllHistoryButton bd-button" style="float: left;">All</button>' : '';
    $history_selector = '<span class="monthsmenu" style="font-size: 12px;">'.$all_button.format_select_tag(EventStream::monthsOfHistoryOptions($this->dbtable->getTotalMonthsOfHistory()), 'months', $this->queryvars, "", false, 'Select History to Show', ' ID="monthsHistoryId"').'</span>';
    $html .= '<div class="itemview_notice">The Current View Shows:  '.$history_selector.'</div>';
    $html .= DBTableRowWhatsNewUser::fetchWhatsNew('NEW_BIG_PAGE_CONTROL2', 'Improvements made to the Slow Page notice. By default less history is shown so pages load faster.', '2/2/2022');
}

if (!$is_current_version) {
    $query_params = array();
    $query_params['itemversion_id'] = $this->dbtable->io__cached_current_itemversion_id;
    $view_url = $this->navigator->getCurrentViewUrl('itemview', '', $query_params);
    $version_view = linkify( $view_url, 'view current version', "View the current version of this item");
    $html .= '<div class="itemview_notice">This is an older version of this item ('.$version_view.')</div>';
}

if (Zend_Registry::get('config')->config_for_testing) {
    $html .= "<p>Most Recent Object ID = {$this->dbtable->io__cached_current_itemversion_id}".', /items/versions/'."{$this->dbtable->io__cached_current_itemversion_id}</p>";
    $html .= "<p>This Object ID = {$this->dbtable->itemversion_id}".', /items/versions/'.$this->dbtable->itemversion_id.', /items/objects/'.$this->dbtable->itemobject_id."</p>";
}

$html .= '<div class="tablewrap">';

$html .= '<div class="buttonrow">'.implode('&nbsp;', $detailslinks).'</div>';

$html .= DBTableRowWhatsNewUser::fetchWhatsNew('SEND_LINK_2022_03', "You can now use the Link to Page button to email a link and a short message to other users.", '3/12/2022');

$fields_to_remove = array();

$fieldlayout = $this->dbtable->getEditViewFieldLayout($this->dbtable->getEditFieldNames(array('')), $fields_to_remove, 'itemview', true);

$more_results = $not_all_records_showing ? '<div class="dashboard-show-more">There may be more results.  Use selector to view more than '.$big_page_length.' of history. <a class="showAllHistoryButton" href="#">Show all.</a></div>' : '';
if (!empty($fieldlayout)) {
    $html .= '<div class="edittablewrapper"><table class="edittable"><colgroup>
				 <col class="table_label_width">
				 <col class="table_value_width">
				 <col class="table_label_width">
				 <col class="table_value_width"></colgroup>';

    $this->dbtable->_navigator = $this->navigator; // need this for generating print view.

    $errormsg = array();
    $this->dbtable->validateFields($this->dbtable->getSaveFieldNames(), $errormsg);
    // the following MUST be called after validateFields because otherwise validate fields will think component errors are real errors
    $this->dbtable->getComponentValidationErrors($errormsg, true);
    $this->dbtable->validateLayoutProcedures($this->dbtable->getLayoutProcedureBlockNames(), $errormsg);

    // while we're here, lets refresh ourselves too. We've got the data already, so it's free!
    if (!$this->dbtable->hasADisposition()) {
        DBTableRowItemObject::setValidationErrorCount($this->dbtable->itemobject_id, count($errormsg));
    }

    $procedure_blocks = array();
    $in_form_procedures = $this->dbtable->getLayoutProcedureBlockNames();
    foreach ($procedure_records as $key => $record) {
        $procedure_blocks[$record['typeobject_id']] = EventStream::renderDashboardView($this->dbtable, array($record), $references_by_typeobject_id, $more_results, true);
        // remove this procedure type from the dashboard since it will appear in the form
        if ( in_array('procedure_list_'.$record['typeobject_id'], $in_form_procedures) ) {
            unset($procedure_records[$key]);
        }
    }
    $html .= DBTableRowItemVersion::fetchItemVersionEditTableTR($fieldlayout, $this->dbtable, $errormsg, '', false, null, $this->fieldhistory, $procedure_blocks);
    $html .= '</table></div>';
}
$html .= '</div>';

$html_dashboard = EventStream::renderDashboardView($this->dbtable, $procedure_records, $references_by_typeobject_id, $more_results, true);

$add_links = array();
if (Zend_Registry::get('customAcl')->isAllowed($_SESSION['account']->getRole(), 'table:comment', 'add')) {
    $add_links[] = linkify($this->navigator->getCurrentViewUrl('commenteditview', 'struct', array('table' => 'comment', 'comment_id' => 'new', 'return_url' => $return_url, 'initialize' => array('itemobject_id' => $this->dbtable->itemobject_id))), 'Add Comment or Attachments', 'add a new comment, photos, or documents', 'bd-button');
}

$html_right .= '<div class="bd-list-container"><ul class="bd-stream-list">';
// in the following: style="position: relative; z-index: 10" seems to be absolutely necessary to get the menu to be on top in IE7
// see http://www.brenelz.com/blog/squish-the-internet-explorer-z-index-bug/

$html_right .= '<input type="hidden" name="btnOnChange" value="" />';
$html_right .= '<li class="bd-event-row" style="position: relative; z-index: 10; padding-bottom:0px;">
		<div class="buttonrow">'.implode('&nbsp;', $add_links).(!empty($menulinks) ? '&nbsp;<button class="jumpmenu">Add New Procedure</button><ul><li>'.implode('</li><li>', $menulinks).'</li></ul>':'').'
	   </div></li>';


$html_right .= implode('', array_reverse($layout_rows));

if ($not_all_records_showing) {
    $html_right .= '<li class="bd-event-row bd-stream-end-notice"><div class="bd-event-content more-records">THERE IS MORE<br /><span class="paren">Use selector at top of page to view more than '.$big_page_length.' of history. <a class="showAllHistoryButton" href="#">Show all.</a></span></div></li>';
}

$html_right .= '</ul></div>';
$html_page = '
		'.$html_head.'
    <div class="twocolleft twocolcol">
      <div  id="leftpanel" class="twocolbody twocolrow twocolscroll-y">
			'.$html.$html_dashboard.'
	  </div>
	</div>
	<div class="twocolright twocolcol">
      <div id="rightpanel" class="twocolbody twocolrow twocolscroll-y">
			'.$html_right.'
	  </div>
	</div>

	';
echo fetch_form_tag($html_page);

?>
<!-- The dialog widget -->
<div id="blueimp-gallery-dialog" data-show="fade" data-hide="fade">
    <!-- The gallery widget  -->
    <div class="blueimp-gallery blueimp-gallery-carousel blueimp-gallery-controls"  data-transition-speed=100>
        <div class="slides"></div>
        <h3 class="title"></h3>
        <a class="prev">‹</a>
        <a class="next">›</a>
        <a class="play-pause"></a>
        <ol class="indicator"></ol>
    </div>
</div>
<script src="<?php echo $baseUrl;?>/jqueryextras/gallery-2.15.2/js/blueimp-gallery.min.js"></script>
<script src="<?php echo $baseUrl;?>/jqueryextras/image-gallery/js/jquery.image-gallery.custom.js"></script>
