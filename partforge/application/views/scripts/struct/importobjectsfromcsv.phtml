<?php
	$config = Zend_Registry::get('config');
	$this->layout()->title = $this->import_object->getPageTitle();
	$this->layout()->setLayout('layoutdialog');
	$this->layout()->show_in_any_window = true;

	$html = '';
//TODO:        $html .= $this->uploaddocument->fetchHiddenIndexFormTag();
	$html .= '
            <input type="hidden" name="MAX_FILE_SIZE" value="'.$config->max_file_upload_size.'">
            <div style="width:600px;">
            <p>The import file must be in CSV format.
		Column headers must start on line 1, and the data must start on line 2.
    To auto-match import columns, the column names in the header should match the field names in your definition.</p>
            <p>There are three different import operations.  This is specified for each row by creating a column
            in your CSV file called IMPORT_ACTION and assigning one of the following three values to each row.
            <dl>
            		<dt>NewObject</dt><dd>Creates a new object. This is the most common import action and is the
                default if you do not have an import action column.</dd>
            		<dt>ReplaceFields</dt><dd>Changes the values of specific fields in an existing version without creating a new version.
            	  To specify the item version to change, you have to have a column called itemversion_id that is prepopulated with
                the correct value.  When you select the Object Type from the top dropdown
                on the following page for this type of import action, it does nothing more than specify the fields you can
                choose from the header dropdowns.</dd>
            		<dt>NewVersion</dt><dd>Creates a new version of an existing object.
    		The SN is used to lookup the corresponding
    		 itemversion_id and itemobject_id of the target object.  If it cannot be found, then a new object is created with that
    		 serial number.  In this case, user_id and effective date are required.  If the itemobject_id
    		 is found then we obtain the version that is current as of the input effective_date.  A check is
    		 done to see if adding the record will result in any new field values.  Note that
    		 we also have to make sure the serial number does not change in mid stream too.  If any new fields
    		 create a new version, then a new version of the object is added with the new fields.
         If not, then the record is skipped.  If the only version found is in the future, then that version is
    		 loaded and a comparison is done on the field to be updated.  If there are no changes other than
    		 then effective date, then the effective date of the existing record is adjusted but no addition
    		 version is creeated.</dd>
            		</dl></p>
            </div>
            <p>
            <table class="edittable"><colgroup>
            <col style="width: 100px;">
            <col style="width: 500px;"></colgroup>
        ';
        $limit_text = number_format(ceil($config->max_file_upload_size / (1024*1024))).' MB';
        //$filetypes = text_to_wrappedhtml('(Allowed: '.implode(', ',$this->uploaddocument->getAllowedFileExtArray()).', < '.$limit_text.')',50);

        $html .= '
        <tr>
                    <th>File Name:</th>
                    <td><input class="inputboxclass" type="file" name="pcfile" size="60"></td>
                </tr>
        <tr>
          <th>Delimited by:</th>
          <td><input name="use_tabs" type="radio" value="0" checked> Commas&nbsp;&nbsp;
              <input name="use_tabs" type="radio" value="1"> Tabs
          </td>
        </tr>
        ';

	$html .= '</table>
        </p>';

        echo fetch_form_page($this->layout()->title,$html,array('Upload and Preview' => 'btnUpload', 'Cancel' => 'btnCancel'),'','','enctype="multipart/form-data"');

?>
